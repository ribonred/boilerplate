# Generated by Django 5.2.3 on 2025-06-14 16:25

import django.core.validators
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        help_text="Required. Enter a valid email address.",
                        max_length=254,
                        unique=True,
                        verbose_name="email address",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True,
                        help_text="Optional. 150 characters or fewer.",
                        max_length=150,
                        verbose_name="first name",
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True,
                        help_text="Optional. 150 characters or fewer.",
                        max_length=150,
                        verbose_name="last name",
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        help_text="Optional. Phone number in international format.",
                        max_length=17,
                        validators=[
                            django.core.validators.RegexValidator(
                                message='Phone number must be entered in the format: "+999999999". Up to 15 digits allowed.',
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                        verbose_name="phone number",
                    ),
                ),
                (
                    "date_of_birth",
                    models.DateField(
                        blank=True,
                        help_text="Optional. Your date of birth.",
                        null=True,
                        verbose_name="date of birth",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_verified",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user has verified their email address.",
                        verbose_name="email verified",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="The date and time when the user account was created.",
                        verbose_name="date joined",
                    ),
                ),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True,
                        help_text="The date and time of the user's last login.",
                        null=True,
                        verbose_name="last login",
                    ),
                ),
                (
                    "email_verified_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="The date and time when the email was verified.",
                        null=True,
                        verbose_name="email verified at",
                    ),
                ),
                (
                    "preferred_language",
                    models.CharField(
                        choices=[("en", "English"), ("id", "Indonesian")],
                        default="en",
                        help_text="User's preferred language for the interface.",
                        max_length=10,
                        verbose_name="preferred language",
                    ),
                ),
                (
                    "timezone_preference",
                    models.CharField(
                        default="UTC",
                        help_text="User's preferred timezone.",
                        max_length=50,
                        verbose_name="timezone",
                    ),
                ),
                (
                    "email_notifications",
                    models.BooleanField(
                        default=True,
                        help_text="Receive email notifications for important updates.",
                        verbose_name="email notifications",
                    ),
                ),
                (
                    "marketing_emails",
                    models.BooleanField(
                        default=False,
                        help_text="Receive marketing and promotional emails.",
                        verbose_name="marketing emails",
                    ),
                ),
                (
                    "password_changed_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="The date and time when the password was last changed.",
                        null=True,
                        verbose_name="password changed at",
                    ),
                ),
                (
                    "failed_login_attempts",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of consecutive failed login attempts.",
                        verbose_name="failed login attempts",
                    ),
                ),
                (
                    "account_locked_until",
                    models.DateTimeField(
                        blank=True,
                        help_text="Account is locked until this date and time.",
                        null=True,
                        verbose_name="account locked until",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "User",
                "verbose_name_plural": "Users",
                "db_table": "auth_user",
                "ordering": ["-date_joined"],
                "abstract": False,
                "swappable": "AUTH_USER_MODEL",
                "indexes": [
                    models.Index(fields=["email"], name="auth_user_email_ece7f7_idx"),
                    models.Index(
                        fields=["is_active", "is_staff"],
                        name="auth_user_is_acti_0b0b9f_idx",
                    ),
                    models.Index(
                        fields=["date_joined"], name="auth_user_date_jo_f1a394_idx"
                    ),
                    models.Index(
                        fields=["last_login"], name="auth_user_last_lo_5f5610_idx"
                    ),
                ],
            },
        ),
    ]
